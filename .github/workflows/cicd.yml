name: CI/CD Pipeline
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    #run tests
    - name: run tests
      run: |
        npm install
        npm run test

    # Logga in pÃ¥ Azure Container Registry
    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: skalbarasystemcontainerregistryv7.azurecr.io
        username: ${{ secrets.AZURE_REGISTRY_USERNAME }}
        password: ${{ secrets.AZURE_REGISTRY_PASSWORD }}

    # Bygga och pusha Docker image till Azure Container Registry
    - name: Build and Push Docker Image
      run: |
        npm run build
        docker build -t skalbarasystemcontainerregistryv7.azurecr.io/myapp:${{ github.sha }} .
        docker push skalbarasystemcontainerregistryv7.azurecr.io/myapp:${{ github.sha }}

    ## Build and push internal api server docker image
    - name: Build and Push Internal API Server Docker Image
      run: |
        cd src/models/mongo_api/server
        docker build -t skalbarasystemcontainerregistryv7.azurecr.io/internal_api_server:${{ github.sha }} .
        docker push skalbarasystemcontainerregistryv7.azurecr.io/internal_api_server:${{ github.sha }}
#
    ## Configure kubectl
    - name: Set up kubectl
      run: |
        echo "${{ secrets.KUBE_CERTIFICATE }}" | base64 -d > ca.crt
        kubectl config set-cluster aks-cluster --embed-certs=true --server=${{ secrets.KUBE_SERVER }} --certificate-authority=ca.crt
        kubectl config set-credentials aks-cluster-user --token=${{ secrets.KUBE_TOKEN }}
        kubectl config set-context aks-cluster --cluster=aks-cluster --user=aks-cluster-user
        kubectl config use-context aks-cluster

    ## Check if the deployment exists and delete if it does
    - name: Delete existing deployment if it exists
      run: |
        if kubectl get deployment myapp-deployment; then
          kubectl delete deployment myapp-deployment
          echo "Deployment deleted successfully. Waiting for resources to be freed up..."
          sleep 30  
        else
          echo "Deployment does not exist. Skipping..."
        fi

#    
    - name: Deploy to Kubernetes
      run: |
        echo "
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: myapp-deployment
          labels:
            app: myapp
        spec:
          replicas: 3
          selector:
            matchLabels:
              app: myapp
          template:
            metadata:
              labels:
                app: myapp
            spec:
              containers:
              - name: myapp-container
                image: skalbarasystemcontainerregistryv7.azurecr.io/myapp:${{ github.sha }}
                ports:
                - containerPort: 80
                resources:
                  requests:
                    cpu: '250m'
                    memory: '500Mi'
                  limits:
                    cpu: '500m'
                    memory: '1Gi'
                startupProbe:
                  exec:
                    command:
                    - sh
                    - -c
                    - 'test -f /var/www/html/index.html'
                  initialDelaySeconds: 5
                  periodSeconds: 5
                livenessProbe:
                  tcpSocket:
                    port: 80
                  initialDelaySeconds: 15
                  periodSeconds: 10
                readinessProbe: 
                  httpGet:
                    path: /
                    port: 80
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  timeoutSeconds: 1
              - name: internal-api-server-container
                image: skalbarasystemcontainerregistryv7.azurecr.io/internal_api_server:${{ github.sha }}
                ports:
                - containerPort: 5050
                startupProbe:
                  tcpSocket:
                    port: 5050
                  failureThreshold: 10
                  periodSeconds: 10
                livenessProbe:
                  httpGet:
                    path: /status
                    port: 5050
                  initialDelaySeconds: 15
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 3
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 5050
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  timeoutSeconds: 10  
                  failureThreshold: 3                  
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: internal-api-service
        spec:
          selector:
            app: myapp
          ports:
          - protocol: TCP
            port: 5050
            targetPort: 5050
        " > deployment.yaml

        kubectl apply -f deployment.yaml
        kubectl rollout status deployment/myapp-deployment --timeout=10m
        # Assuming autoscaling.yml is prepared for applying
        kubectl apply -f .github/workflows/autoscaling.yml
